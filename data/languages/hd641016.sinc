define endian=big;
define alignment=1;

define space ram type=ram_space size=4 wordsize=1 default;
define space register type=register_space size=4;

define register offset=0 size=4
[R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15];
define register offset=0x100 size=4 [PC ssp bsp ebr rbr ibr cbnr sr ccr bmr gbnr vbnr];

# 8 â€“ token size
# field op includes bits 0 to 7
define token opcode(8)
	op = (0,7)
	sz = (0,1)
	swap_s = (0,0)
	op_1_to_7 = (1,7)
	op_2_to_7 = (2,7)

    ead = (0,6)
    Rn = (0,3)
    ea_s1 = (4,5)
    ea_s2 = (6,7)
    ea_2_to_6 = (2,6)
    ea_4_to_6 = (4,6)
    ea_6_to_7 = (6,7)
    ea_6 = (6,6)
    ea_Sd = (4,5)
    ea_si = (0,1)
    ea_a = (7,7)
;

define token data8 (8)
    cc      = (0,3)
    cr_code = (0,7)
    imm4    = (0,3)
    imm5    = (0,4)
    imm8    = (0,7)
    imm8_b  = (0,7)
    simm8   = (0,7) signed
    ea8     = (0,7)

    Rnx     = (0,3)
    Rny     = (4,7)

    Rnd     = (0,3)
    Rns     = (4,7)
    Rnd_4_to_7 = (4,7)
;

define token muldiv8 (8)
    muldiv_fnc = (4,6)
    muldiv_7   = (7,7)
;

define token sar8(8)
    sar_Rn = (0,3)
    sar_Imm = (0,4)
    sar_fnc = (5,7)
;

define token bit8(8)
    bit_Rn = (0,3)
    bit_Imm = (0,4)
    bit_fnc = (5,6)
;

define token reglist(16)
    reglist_r0 = (0,0)
    reglist_r1 = (1,1)
    reglist_r2 = (2,2)
    reglist_r3 = (3,3)
    reglist_r4 = (4,4)
    reglist_r5 = (5,5)
    reglist_r6 = (6,6)
    reglist_r7 = (7,7)
    reglist_r8 = (8,8)
    reglist_r9 = (9,9)
    reglist_r10 = (10,10)
    reglist_r11 = (11,11)
    reglist_r12 = (12,12)
    reglist_r13 = (13,13)
    reglist_r14 = (14,14)
    reglist_r15 = (15,15)
;

define token data16 (16)
    imm16   = (0,15)
    simm16  = (0,15) signed
;

define token data32 (32)
	imm32   = (0,31)
	imm32_b   = (0,31)
    simm32  = (0,31) signed
;

define token ea8a (8)
    ea8a_Rn = (0,3)
    ea8a_Sd = (4,5)
    ea8a_L = (6,6)
    ea8a_7 = (7,7)
;

define token ea8b (8)
    ea8b_Xm = (0,3)
    ea8b_Sf = (4,5)
;

attach variables [ Rn Rnd Rns Rnx Rny Rnd_4_to_7 sar_Rn ea8a_Rn ea8b_Xm] [
	R0  R1  R2  R3  R4  R5  R6  R7
	R8  R9 R10 R11 R12  R13  R14  R15
];

disp8: rel is simm8 [ rel = inst_next + simm8; ] {
    export *:4 rel;
} 
disp16: rel is simm16 [ rel = inst_next + simm16; ] {
    export *:4 rel;
} 
disp32: rel is simm32 [ rel = inst_next + simm32; ] {
    export *:4 rel;
}

REGLIST_R0:             R0    is              reglist_r0=1 & R0 { }
REGLIST_R0:                   is              reglist_r0=0 { }
REGLIST_R1:  REGLIST_R0 R1    is REGLIST_R0 & reglist_r1=1 & R1 { }
REGLIST_R1:  REGLIST_R0       is REGLIST_R0 & reglist_r1=0 { }
REGLIST_R2:  REGLIST_R1 R2    is REGLIST_R1 & reglist_r2=1 & R2 { }
REGLIST_R2:  REGLIST_R1       is REGLIST_R1 & reglist_r2=0 { }
REGLIST_R3:  REGLIST_R2 R3    is REGLIST_R2 & reglist_r3=1 & R3 { }
REGLIST_R3:  REGLIST_R2       is REGLIST_R2 & reglist_r3=0 { }
REGLIST_R4:  REGLIST_R3 R4    is REGLIST_R3 & reglist_r4=1 & R4 { }
REGLIST_R4:  REGLIST_R3       is REGLIST_R3 & reglist_r4=0 { }
REGLIST_R5:  REGLIST_R4 R5    is REGLIST_R4 & reglist_r5=1 & R5 { }
REGLIST_R5:  REGLIST_R4       is REGLIST_R4 & reglist_r5=0 { }
REGLIST_R6:  REGLIST_R5 R6    is REGLIST_R5 & reglist_r6=1 & R6 { }
REGLIST_R6:  REGLIST_R5       is REGLIST_R5 & reglist_r6=0 { }
REGLIST_R7:  REGLIST_R6 R7    is REGLIST_R6 & reglist_r7=1 & R7 { }
REGLIST_R7:  REGLIST_R6       is REGLIST_R6 & reglist_r7=0 { }
REGLIST_R8:  REGLIST_R7 R8    is REGLIST_R7 & reglist_r8=1 & R8 { }
REGLIST_R8:  REGLIST_R7       is REGLIST_R7 & reglist_r8=0 { }
REGLIST_R9:  REGLIST_R8 R9    is REGLIST_R8 & reglist_r9=1 & R9 { }
REGLIST_R9:  REGLIST_R8       is REGLIST_R8 & reglist_r9=0 { }
REGLIST_R10: REGLIST_R9 R10   is REGLIST_R9 & reglist_r10=1 & R10 { }
REGLIST_R10: REGLIST_R9       is REGLIST_R9 & reglist_r10=0 { }
REGLIST_R11: REGLIST_R10 R11  is REGLIST_R10 & reglist_r11=1 & R11 { }
REGLIST_R11: REGLIST_R10      is REGLIST_R10 & reglist_r11=0 { }
REGLIST_R12: REGLIST_R11 R12  is REGLIST_R11 & reglist_r12=1 & R12 { }
REGLIST_R12: REGLIST_R11      is REGLIST_R11 & reglist_r12=0 { }
REGLIST_R13: REGLIST_R12 R13  is REGLIST_R12 & reglist_r13=1 & R13 { }
REGLIST_R13: REGLIST_R12      is REGLIST_R12 & reglist_r13=0 { }
REGLIST_R14: REGLIST_R13 R14  is REGLIST_R13 & reglist_r14=1 & R14 { }
REGLIST_R14: REGLIST_R13      is REGLIST_R13 & reglist_r14=0 { }
REGLIST_R15: REGLIST_R14 R15  is REGLIST_R14 & reglist_r15=1 & R15 { }
REGLIST_R15: REGLIST_R14      is REGLIST_R14 & reglist_r15=0 { }
REGLIST: REGLIST_R15          is REGLIST_R15 { }

CR: "CCR"   is cr_code=0b00100000 { }
CR: "VBNR"  is cr_code=0b00000001 { }
CR: "CBNR"  is cr_code=0b01000000 { }
CR: "BSP"   is cr_code=0b01000001 { }
CR: "BMR"   is cr_code=0b10000000 { }
CR: "GBNR"  is cr_code=0b10000001 { }
CR: "SR"    is cr_code=0b10100000 { }
CR: "EBR"   is cr_code=0b11000000 { }
CR: "RBR"   is cr_code=0b11000001 { }
CR: "USP"   is cr_code=0b11000010 { }
CR: "IBR"   is cr_code=0b11000011 { }

CC: "CC"    is cc=0b0100 { }
CC: "CS"    is cc=0b0101 { }
CC: "NE"    is cc=0b0110 { }
CC: "EQ"    is cc=0b0111 { }
CC: "GE"    is cc=0b1100 { }
CC: "LT"    is cc=0b1101 { }
CC: "GT"    is cc=0b1110 { }
CC: "LE"    is cc=0b1111 { }
CC: "HI"    is cc=0b0010 { }
CC: "LS"    is cc=0b0011 { }
CC: "PL"    is cc=0b1010 { }
CC: "MI"    is cc=0b1011 { }
CC: "VC"    is cc=0b1000 { }
CC: "VS"    is cc=0b1001 { }
CC: "T"     is cc=0b0000 { }
CC: "F"     is cc=0b0001 { }

Sz: ".B" is sz=0b00 { }
Sz: ".W" is sz=0b01 { }
Sz: ".L" is sz=0b10 { }

ea_Si: ".B" is ea_si=0b01 { }
ea_Si: ".W" is ea_si=0b10 { }
ea_Si: ".L" is ea_si=0b11 { }

with EA: {
    # 1. Register direct
    : Rn is Rn & ea_4_to_6=0b100 { }

    # 2. Register indirect
    : "@"Rn is Rn & ea_6=0b0 & ea_Sd=0b00 { }
    : "@("simm8, Rn) is Rn & ea_6=0b0 & ea_Sd=0b01; simm8 { }
    : "@("simm16, Rn) is Rn & ea_6=0b0 & ea_Sd=0b10; simm16 { }
    : "@("simm32, Rn) is Rn & ea_6=0b0 & ea_Sd=0b11; simm32 { }

    # 3. Register indirect auto-increment
    : "@"Rn"+" is Rn & ea_4_to_6=0b101 { }

    # 4. Register indirect auto-decrement
    : "@-"Rn is Rn & ea_4_to_6=0b110 { }

    # 5. Immediate
    : imm8^ea_Si is ea_2_to_6=0b11100 & ea_si=0b01 & ea_Si; imm8 { }
    : imm16^ea_Si is ea_2_to_6=0b11100 & ea_si=0b10 & ea_Si; imm16 { }
    : imm32^ea_Si is ea_2_to_6=0b11100 & ea_si=0b11 & ea_Si; imm32 { }

    # 6. Absolute Address
    : "@" imm8  is ea_2_to_6=0b11101 & ea_si=0b01; imm8 { }
    : "@" imm16 is ea_2_to_6=0b11101 & ea_si=0b10; imm16 { }
    : "@" imm32 is ea_2_to_6=0b11101 & ea_si=0b11; imm32 { }

    # 8. Register indirect with index
    : "@("ea8b_Xm*Sf, ea8a_Rn)         is ead=0b1111100; ea8a_7=0 & ea8a_L & ea8a_Sd=0b00 & ea8a_Rn; ea8b_Sf & ea8b_Xm [ Sf = 1 << ea8b_Sf; ] { }
    : "@("imm8, ea8b_Xm*Sf, ea8a_Rn)   is ead=0b1111100; ea8a_7=0 & ea8a_L & ea8a_Sd=0b01 & ea8a_Rn; ea8b_Sf & ea8b_Xm; imm8 [ Sf = 1 << ea8b_Sf; ] { }
    : "@("imm16, ea8b_Xm*Sf, ea8a_Rn)  is ead=0b1111100; ea8a_7=0 & ea8a_L & ea8a_Sd=0b10 & ea8a_Rn; ea8b_Sf & ea8b_Xm; imm16 [ Sf = 1 << ea8b_Sf; ] { }
    : "@("imm32, ea8b_Xm*Sf, ea8a_Rn)  is ead=0b1111100; ea8a_7=0 & ea8a_L & ea8a_Sd=0b11 & ea8a_Rn; ea8b_Sf & ea8b_Xm; imm32 [ Sf = 1 << ea8b_Sf; ] { }

    # 10. Program counter relative
    : @PC           is PC & (ead=0b1111101); (ea_6_to_7=0b10 & ea_Sd=0b00) { }
    : @(simm8, PC)   is PC & (ead=0b1111101); (ea_6_to_7=0b10 & ea_Sd=0b01); simm8 { }
    : @(simm16, PC)  is PC & (ead=0b1111101); (ea_6_to_7=0b10 & ea_Sd=0b10); simm16 { }
    : @(simm32, PC)  is PC & (ead=0b1111101); (ea_6_to_7=0b10 & ea_Sd=0b11); simm32 { }

    # 11. Register double indirect
    : @(imm8, @(imm8_b, Rn)) is (ead=0b1111110); (Rn & ea_s1=0b01 & ea_s2=0b01); imm8; imm8_b { }
    : @(imm8, @(imm32_b, Rn)) is (ead=0b1111110); (Rn & ea_s1=0b01 & ea_s2=0b11); imm8; imm32_b { }
    : @(imm32, @(imm8_b, Rn)) is (ead=0b1111110); (Rn & ea_s1=0b11 & ea_s2=0b01); imm32; imm8_b { }
    : @(imm32, @(imm32_b, Rn)) is (ead=0b1111110); (Rn & ea_s1=0b11 & ea_s2=0b11); imm32; imm32_b { }
}

EAs: EA is EA { export EA; }
EAd: EA is EA { export EA; }

# 16.3.1 - ADD:G (Add Binary)
:ADD^Sz EAs, EAd is op_2_to_7=0b000000 & Sz; (ea_a=0 ... & EAs); EAd unimpl
:ADD^Sz EAs, R0 is op_2_to_7=0b000000 & Sz & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.2 - ADD:Q (Add Quick)
:ADD^Sz simm8, EAd is (op_2_to_7=0b000100 & Sz); simm8; EAd unimpl

# 16.3.3 - ADD:R (Add Register)
:ADD^Sz Rns, Rnd is (op_2_to_7=0b001000 & Sz); (Rns & Rnd) unimpl

# 16.3.4 - ADD:RQ (Add Register Quick)
:ADD^Sz imm4, Rnd_4_to_7 is (op_2_to_7=0b001100 & Sz); Rnd_4_to_7 & imm4 unimpl

# 16.3.5 - TODO: ADDS (Add with Sign Extension)
# 16.3.6 - TODO: ADDX (Add with CX Flag)

# 16.3.7 - AND (AND Logical)
:AND^Sz EAs, EAd  is op_2_to_7=0b100000 & Sz; (ea_a=0 ... & EAs); EAd unimpl
:AND^Sz EAs, R0   is op_2_to_7=0b100000 & Sz & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.8 - ANDC (AND CR Register)
:ANDC EAs, CR    is op=0b11111000; CR; EAs unimpl

# 16.3.9 - Bcc:G (Branch According to Condition Code)
:B^CC disp8  is (op_2_to_7=0b101001 & sz=0b00); cc & CC; disp8 unimpl
:B^CC disp16 is (op_2_to_7=0b101001 & sz=0b01); cc & CC; disp16 unimpl
:B^CC disp32 is (op_2_to_7=0b101001 & sz=0b10); cc & CC; disp32 unimpl

# 16.3.10 - BCLR (Bit Test and Clear)
:BCLR^Sz bit_Rn, EAd is op_2_to_7=0b011010 & Sz; (bit_fnc=0b10 & bit_Rn); EAd unimpl
:BCLR^Sz bit_Imm, EAd is op_2_to_7=0b011011 & Sz; (bit_fnc=0b10 & bit_Imm); EAd unimpl

# 16.3.11 - BEQ (Branch If Equal)
:BEQ disp8  is (op_2_to_7=0b101000 & sz=0b00); disp8 unimpl
:BEQ disp16 is (op_2_to_7=0b101000 & sz=0b01); disp16 unimpl
:BEQ disp32 is (op_2_to_7=0b101000 & sz=0b10); disp32 unimpl

# 16.3.12 - TODO: BFEXT (Bit Field Data Extract)
# 16.3.13 - TODO: BFINS (Bit Field Data Insert)
# 16.3.14 - TODO: BFMOV (Bit Field Data Move)
# 16.3.15 - TODO: BFSCH (Bit Field Data Search)

# 16.3.16 - BNE (Branch If Not Equal)
:BNE disp8 is (op_2_to_7=0b101100 & sz=0b00); disp8 unimpl
:BNE disp16 is (op_2_to_7=0b101100 & sz=0b01); disp16 unimpl
:BNE disp32 is (op_2_to_7=0b101100 & sz=0b10); disp32 unimpl

# 16.3.17 - TODO: BNOT (Bit Test and Not)

# 16.3.18 - BRA (Branch Always)
:BRA disp8  is (op_2_to_7=0b100110 & sz=0b00); disp8 {
    goto disp8;
}
:BRA disp16 is (op_2_to_7=0b100110 & sz=0b01); disp16 {
    goto disp16;
}
:BRA disp32 is (op_2_to_7=0b100110 & sz=0b10); disp32 {
    goto disp32;
}

# 16.3.19 - BSET (Bit Test and Set)
:BSET^Sz bit_Rn, EAd is op_2_to_7=0b011010 & Sz; (bit_fnc=0b00 & bit_Rn); EAd unimpl
:BSET^Sz bit_Imm, EAd is op_2_to_7=0b011011 & Sz; (bit_fnc=0b00 & bit_Imm); EAd unimpl

# 16.3.20 - BSR (Branch to Subroutine)
:BSR disp8  is (op_2_to_7=0b101010 & sz=0b00); disp8 unimpl
:BSR disp16 is (op_2_to_7=0b101010 & sz=0b01); disp16 unimpl
:BSR disp32 is (op_2_to_7=0b101010 & sz=0b10); disp32 unimpl

# 16.3.21 - BTST (Bit Test)
:BTST^Sz bit_Rn, EAd is op_2_to_7=0b011010 & Sz; (bit_fnc=0b11 & bit_Rn); EAd unimpl
:BTST^Sz bit_Imm, EAd is op_2_to_7=0b011011 & Sz; (bit_fnc=0b11 & bit_Imm); EAd unimpl

# 16.3.22 - TODO: CGBN (Push and Change Global Bank Number)

# 16.3.23 - CLR (Clear)
:CLR^Sz EAd is op_2_to_7=0b000101 & Sz; EAd unimpl

# 16.3.24 - CMP:G (Compare)
:CMP^Sz EAs, EAd is op_2_to_7=0b000010 & Sz; (ea_a=0 ... & EAs); EAd unimpl
:CMP^Sz EAs, R0 is op_2_to_7=0b000010 & Sz & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.25 - CMP:Q (Compare Quick)
:CMP^Sz simm8, EAd is (op_2_to_7=0b000110 & Sz); simm8; EAd unimpl

# 16.3.26 - CMP:R (Compare Register)
:CMP Rns, Rnd is (op_2_to_7=0b001010 & Sz); (Rns & Rnd) unimpl

# 16.3.27 - TODO: CMP:RQ (Compare Register Quick)
# 16.3.28 - TODO: CMPS (Compare with Sign Extension)
# 16.3.29 - TODO: DADD (Decimal ADD with CX Flag)
# 16.3.30 - TODO: DCBN (Decrement Current Bank Number)

# 16.3.31 - DIVXS (Divide Extented as Signed)
:DIVXS EAs, EAd is op=0b11101111;       (muldiv_7=0 & (muldiv_fnc=0b000 | muldiv_fnc=0b001)); (ea_a=0 ... & EAs); EAd unimpl
:DIVXS EAs, R0  is op=0b11101111 & R0;  (muldiv_7=0 & (muldiv_fnc=0b000 | muldiv_fnc=0b001)); (ea_a=1 ... & EAs) unimpl

# 16.3.32 - DIVXU (Divide Extended as Unsigned)
:DIVXU EAs, EAd is op=0b11101111;       (muldiv_7=0 & (muldiv_fnc=0b100 | muldiv_fnc=0b101)); (ea_a=0 ... & EAs); EAd unimpl
:DIVXU EAs, R0  is op=0b11101111 & R0;  (muldiv_7=0 & (muldiv_fnc=0b100 | muldiv_fnc=0b101)); (ea_a=1 ... & EAs) unimpl

# 16.3.33 - TODO: DNEG (Decimal Negate with CX Flag)
# 16.3.34 - TODO: DSUB (Decimal Subtract with CX Flag)
# 16.3.35 - TODO: EXTS (Extend as Signed)

# 16.3.36 - EXTU (Extend as Unsigned)
:EXTU^Sz Rnd is (op_2_to_7=0b101011 & Sz); Rnd unimpl

# 16.3.37 - TODO: ICBN (Increment Current Bank Number)
# 16.3.38 - TODO: JMP (Jump)

# 16.3.39 - JSR (Jump to Subroutine)
:JSR EAd is (op=0b10101011); EAd unimpl

# 16.3.40 - LDC (Load to CR Register)
:LDC EAs, CR    is op=0b11111011; CR; EAs unimpl

# 16.3.41 - LDM (Load to Multiple Registers)
:LDM^Sz EAs, [REGLIST]    is (op_2_to_7=0b011101 & Sz); EAs; REGLIST unimpl

# 16.3.42 - LINK (Link)
:LINK Rn, imm8  is (op_2_to_7=0b110100 & sz=0b00); Rn; imm8 unimpl
:LINK Rn, imm16 is (op_2_to_7=0b110100 & sz=0b01); Rn; imm16 unimpl
:LINK Rn, imm32 is (op_2_to_7=0b110100 & sz=0b10); Rn; imm32 unimpl

# 16.3.43 - MOVA (Move Effective Address)
:MOVA EAs, EAd  is op=0b10111111; (ea_a=0 ... & EAs); EAd unimpl
:MOVA EAs, R0   is op=0b10111111 & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.44 - TODO: MOVF (Move Register 0 Fast)
# 16.3.45 - TODO: MOVFP (Move from Peripheral)

# 16.3.46 - MOVFPE (Move from Peripheral with E Clock)
:MOVFPE^Sz EAs, EAd is op_2_to_7=0b011111 & Sz; (ea_a=0 ... & EAs); EAd unimpl
:MOVFPE^Sz EAs, R0  is op_2_to_7=0b011111 & Sz & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.47 - MOV:G (Move Data from Source to Destination)
:MOV^Sz EAs, EAd is op_2_to_7=0b000011 & Sz; (ea_a=0 ... & EAs); EAd unimpl
:MOV^Sz EAs, R0 is op_2_to_7=0b000011 & Sz & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.48 - MOV:Q (Move Quick)
:MOV":Q"^Sz simm8, EAd is (op_2_to_7=0b000111 & Sz); simm8; EAd unimpl

# 16.3.49 - MOV:R (Move Register)
:MOV^Sz Rns, Rnd is (op_2_to_7=0b001011 & Sz); (Rns & Rnd) unimpl

# 16.3.50 - MOV:RQ (Move Register Quick)
:MOV^Sz imm4, Rnd_4_to_7 is (op_2_to_7=0b001111 & Sz); Rnd_4_to_7 & imm4 unimpl

# 16.3.51 - MOVS (Move with Sign Extension)
:MOVS^Sz EAs, EAd   is op_2_to_7=0b010011 & Sz; (ea_a=0 ... & EAs); EAd unimpl
:MOVS^Sz EAs, R0    is op_2_to_7=0b010011 & Sz & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.52 - TODO: MOVTP (Move to Peripheral)

# 16.3.53 - MOVTPE (Move to Peripheral with E Clock)
:MOVTPE^Sz EAs, EAd   is op_2_to_7=0b011110 & Sz; (ea_a=0 ... & EAs); EAd unimpl
:MOVTPE^Sz EAs, R0    is op_2_to_7=0b011110 & Sz & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.54 - MULXS (Multiply Extended as Signed)
:MULXS EAs, EAd is op=0b11101110;       (muldiv_7=0 & (muldiv_fnc=0b000 | muldiv_fnc=0b001)); (ea_a=0 ... & EAs); EAd unimpl
:MULXS EAs, R0  is op=0b11101110 & R0;  (muldiv_7=0 & (muldiv_fnc=0b000 | muldiv_fnc=0b001)); (ea_a=1 ... & EAs) unimpl

# 16.3.55 - MULXU (Multiply Extended as Unsigned)
:MULXU EAs, EAd is op=0b11101110;       (muldiv_7=0 & (muldiv_fnc=0b100 | muldiv_fnc=0b101)); (ea_a=0 ... & EAs); EAd unimpl
:MULXU EAs, R0  is op=0b11101110 & R0;  (muldiv_7=0 & (muldiv_fnc=0b100 | muldiv_fnc=0b101)); (ea_a=1 ... & EAs) unimpl

# 16.3.56 - TODO: NEG (Negate)
# 16.3.57 - TODO: NEGX (Negate with CX Flag)
# 16.3.58 - TODO: NOP (No Operation)

# 16.3.59 - NOT (Not-Logical Complement)
:NOT^Sz EAd is op_2_to_7=0b100100 & Sz; EAd unimpl

# 16.3.60 - OR (Or Logical)
:OR^Sz EAs, EAd  is op_2_to_7=0b100010 & Sz; (ea_a=0 ... & EAs); EAd unimpl
:OR^Sz EAs, R0   is op_2_to_7=0b100010 & Sz & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.61 - ORC (Logical OR CR Register)
:ORC EAs, CR  is op=0b11111001; CR; EAs unimpl

# 16.3.62 - TODO: PGBN (Pull Global Bank Number)
# 16.3.63 - TODO: RESET (Reset)

# 16.3.64 - ROTL (Rotate Left)
:ROTL^Sz sar_Rn, EAd is op_2_to_7=0b011000 & Sz; (sar_fnc=0b110 & sar_Rn); EAd unimpl
:ROTL^Sz sar_Imm, EAd is op_2_to_7=0b011001 & Sz; (sar_fnc=0b110 & sar_Imm); EAd unimpl

# 16.3.65 - TODO: ROTR (Rotate Right)
# 16.3.66 - TODO: ROTXL (Rotate Left with CX Flag)
# 16.3.67 - TODO: ROTXR (Rotate Right with CX Flag)
# 16.3.68 - TODO: RTD (Return and Deallocate)

# 16.3.69 - RTE (Return from Exception)
:RTE is op=0b11110001 {
    sr = *ssp;
    ssp = ssp + 4;

    PC = *ssp;
    ssp = ssp + 4;

    goto [PC];
}

# 16.3.70 - TODO: RTR (Return and Restore Condition Codes)

# 16.3.71 - RTS (Return from Subroutine)
:RTS    is (op=0b10111011) {
    # TODO: get the correct stack pointer
    PC = *ssp;
    ssp = ssp + 4;

    goto [PC];
}

# 16.3.72 - SCB (Subtract, Compare, and Branch Conditionally)
:SCB/CC Rnd_4_to_7, disp8   is (op_2_to_7=0b101101 & sz=0b00); Rnd_4_to_7 & cc & CC; disp8 unimpl
:SCB/CC Rnd_4_to_7, disp16  is (op_2_to_7=0b101101 & sz=0b01); Rnd_4_to_7 & cc & CC; disp16 unimpl
:SCB/CC Rnd_4_to_7, disp32  is (op_2_to_7=0b101101 & sz=0b10); Rnd_4_to_7 & cc & CC; disp32 unimpl

# 16.3.73 - TODO: SCMP (String Compare According to Condition Codes)
# 16.3.74 - TODO: SET (Set According to Condition Codes)
# 16.3.75 - TODO: SHAL (Shift Arithmetically Left)
# 16.3.76 - TODO: SHAR (Shift Arithmetically Right)

# 16.3.77 - SHLL (Shift Logically Left)
:SHLL^Sz sar_Rn, EAd is op_2_to_7=0b011000 & Sz; (sar_fnc=0b101 & sar_Rn); EAd unimpl
:SHLL^Sz sar_Imm, EAd is op_2_to_7=0b011001 & Sz; (sar_fnc=0b101 & sar_Imm); EAd unimpl

# 16.3.78 - SHLR (Shift Logically Right)
:SHLR^Sz sar_Rn, EAd is op_2_to_7=0b011000 & Sz; (sar_fnc=0b001 & sar_Rn); EAd unimpl
:SHLR^Sz sar_Imm, EAd is op_2_to_7=0b011001 & Sz; (sar_fnc=0b001 & sar_Imm); EAd unimpl

# 16.3.79 - TODO: SLEEP (Sleep)
# 16.3.80 - TODO: SMOV (String Move)
# 16.3.81 - TODO: SSCH (String Search According to Condition Codes)
# 16.3.82 - TODO: SSTR (String Store)

# 16.3.83 - STC (Store CR Register)
:STC CR, EAd    is op=0b11111100; CR; EAd unimpl

# 16.3.84 - STM (Store Multiple Registers)
:STM^Sz [REGLIST], EA    is op_2_to_7=0b011100 & Sz; EA; REGLIST unimpl

# 16.3.85 - SUB:G (Subtract Binary)
:SUB^Sz EAs, EAd is op_2_to_7=0b000001 & Sz; (ea_a=0 ... & EAs); EAd unimpl
:SUB^Sz EAs, R0 is op_2_to_7=0b000001 & Sz & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.86 - SUB:R (Subtract Register)
:SUB^Sz Rns, Rnd is (op_2_to_7=0b001001 & Sz); (Rns & Rnd) unimpl

# 16.3.87 - SUB:RQ (Subtract Register Quick)
:SUB^Sz imm4, Rnd_4_to_7 is (op_2_to_7=0b001101 & Sz); Rnd_4_to_7 & imm4 unimpl

# 16.3.88 - TODO: SUBS (Subtract with Sign Extension)
# 16.3.89 - TODO: SUBX (Subtract with CX Flag)

# 16.3.90 - SWAP (Swap Register Halves)
swap_S: ".B" is swap_s=0b0 { }
swap_S: ".W" is swap_s=0b1 { }
:SWAP^swap_S EAd is op_1_to_7=0b1110101 & swap_S; EAd unimpl

# 16.3.91 - TODO: TAS (Test and Set)
# 16.3.92 - TODO: TRAP (Trap According to Condition Codes)

# 16.3.93 - TRAPA (Trap Always)
:TRAPA imm4 is op=0b11110010; imm4 unimpl

# 16.3.94 - TST (Test)
:TST^Sz EAd is op_2_to_7=0b010110 & Sz; EAd unimpl

# 16.3.95 - UNLK (Unlink)
:UNLK Rn is (op=0b11010011); Rn unimpl

# 16.3.96 - XCH (Exchange Registers)
:XCH Rnx, Rny is op=0b10110011; (Rnx & Rny) unimpl

# 16.3.97 - XOR (Exclusive OR Logical)
:XOR^Sz EAs, EAd    is op_2_to_7=0b100001 & Sz; (ea_a=0 ... & EAs); EAd unimpl
:XOR^Sz EAs, R0     is op_2_to_7=0b100001 & Sz & R0; (ea_a=1 ... & EAs) unimpl

# 16.3.98 - TODO: XORC (Exclusive OR Control Register)

@if defined(INCLUDE_TEMPS)
:CMP_RQ is (op=0x38 | op=0x39 | op=0x3A) unimpl

:ADDS   is (op=0x40 | op=0x41 | op=0x42) unimpl
:SUBS   is (op=0x44 | op=0x45 | op=0x46) unimpl
:CMPS   is (op=0x48 | op=0x49 | op=0x4A) unimpl

:ADDX   is (op=0x50 | op=0x51 | op=0x52) unimpl
:SUBX   is (op=0x54 | op=0x55 | op=0x56) unimpl

:MOVF   is (op=0x5C | op=0x5D | op=0x5E) unimpl

:BIT    is (op=0x67 | op=0x69 | op=0x6A | op=0x6C | op=0x6D | op=0x6E) unimpl
:MOVFPW is (op=0x7C | op=0x7D | op=0x7E) unimpl

:NEG    is (op=0x8C | op=0x8D | op=0x8E) unimpl

:STRING is (op=0x94 | op=0x95 | op=0x96) unimpl

:JMP    is (op=0x9B) unimpl
:NEGX   is (op=0x9C | op=0x9D | op=0x9E) unimpl

:DADD   is (op=0xA3) unimpl

:DSUB   is (op=0xA7) unimpl

:DNEG   is (op=0xAF) unimpl
:SET    is (op=0xB7) unimpl
:RTD    is (op=0xB8 | op=0xB9 | op=0xBA) unimpl
:EXTS   is (op=0xBC | op=0xBD | op=0xBE) unimpl

:BFEXT  is (op=0xD4) unimpl
:BFINS  is (op=0xD5) unimpl
:BFSCH  is (op=0xD6) unimpl
:BFMOV  is (op=0xD7) unimpl

:MOVTP  is (op=0xE0 | op=0xE1) unimpl
:MOVFP  is (op=0xE2 | op=0xE3) unimpl
:CGBN   is (op=0xE4 | op=0xE5 | op=0xE6 | op=0xE7) unimpl
:PGBN   is (op=0xE8 | op=0xE9) unimpl
:TAS    is (op=0xEC) unimpl

:RESET  is op=0xF0 unimpl

:TRAP   is op=0xF3 unimpl
:RTR    is op=0xF4 unimpl
:SLEEP  is op=0xF5 unimpl
# F6
# F7
:XORC   is op=0xFA unimpl
:ICBN   is op=0xFD unimpl
:DCBN   is op=0xFE unimpl
:NOP    is op=0xFF {}
@endif
